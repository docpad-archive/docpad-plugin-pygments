// Generated by CoffeeScript 1.3.3
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor(); child.__super__ = parent.prototype; return child; };

  module.exports = function(BasePlugin) {
    var PygmentsPlugin, balUtil, exec, jsdom, pygmentizeElement, pygmentizeSource, spawn, _ref;
    balUtil = require('bal-util');
    jsdom = require('jsdom');
    _ref = require('child_process'), spawn = _ref.spawn, exec = _ref.exec;
    pygmentizeSource = function(source, language, next) {
      var args, errors, pygments, result;
      result = '';
      errors = '';
      args = ['-f', 'html', '-O', 'encoding=utf-8'];
      if (language) {
        args.unshift(language);
        args.unshift('-l');
      } else {
        args.unshift('-g');
      }
      pygments = spawn('pygmentize', args);
      pygments.stdout.on('data', function(data) {
        return result += data.toString();
      });
      pygments.stderr.on('data', function(data) {
        return errors += data.toString();
      });
      pygments.on('exit', function() {
        if (errors) {
          return next(new Error(errors));
        }
        return next(null, result);
      });
      pygments.stdin.write(source);
      return pygments.stdin.end();
    };
    pygmentizeElement = function(window, element, next) {
      var childNode, language, parentNode, source, _ref1, _ref2;
      parentNode = element;
      childNode = element;
      source = false;
      language = false;
      if (element.childNodes.length && ((_ref1 = String(element.childNodes[0].tagName).toLowerCase()) === 'pre' || _ref1 === 'code')) {
        childNode = element.childNodes[0];
      } else if ((_ref2 = element.parentNode.tagName) === 'pre' || _ref2 === 'code') {
        parentNode = element.parentNode;
      }
      if (/highlighted/.test(parentNode.className)) {
        return next();
      }
      source = childNode.innerHTML;
      language = childNode.getAttribute('lang') || parentNode.getAttribute('lang');
      language = language.replace(/^\s+|\s+$/g, '');
      return pygmentizeSource(source, language, function(err, result) {
        var resultElInner, resultElWrapper;
        if (err) {
          return next(err);
        }
        resultElWrapper = window.document.createElement('div');
        resultElWrapper.innerHTML = result;
        resultElInner = resultElWrapper.childNodes[0];
        resultElInner.className += ' highlighted codehilite';
        element.parentNode.replaceChild(resultElInner, element);
        return next();
      });
    };
    return PygmentsPlugin = (function(_super) {

      __extends(PygmentsPlugin, _super);

      function PygmentsPlugin() {
        return PygmentsPlugin.__super__.constructor.apply(this, arguments);
      }

      PygmentsPlugin.prototype.name = 'pygments';

      PygmentsPlugin.prototype.renderDocument = function(opts, next) {
        var extension, file;
        extension = opts.extension, file = opts.file;
        if (file.type === 'document' && extension === 'html') {
          return jsdom.env({
            html: "<html><body>" + opts.content + "</body></html>",
            features: {
              QuerySelector: true
            },
            done: function(err, window) {
              var element, elements, key, tasks, value, _i, _len;
              if (err) {
                return next(err);
              }
              elements = window.document.querySelectorAll('code pre, pre code, .highlight');
              if (elements.length === 0) {
                return next();
              }
              tasks = new balUtil.Group(function(err) {
                if (err) {
                  return next(err);
                }
                opts.content = window.document.body.innerHTML;
                return next();
              });
              tasks.total = elements.length;
              for (key = _i = 0, _len = elements.length; _i < _len; key = ++_i) {
                value = elements[key];
                element = elements.item(key);
                pygmentizeElement(window, element, tasks.completer());
              }
              return true;
            }
          });
        } else {
          return next();
        }
      };

      return PygmentsPlugin;

    })(BasePlugin);
  };

}).call(this);
